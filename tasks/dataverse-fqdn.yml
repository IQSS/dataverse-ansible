---

- name: get fqdn
  debug:
    msg: '##### GET FQDN #####'

- name: default to http
  set_fact:
    protocol: http

- name: unless ssl is enabled
  set_fact:
    protocol: https
  when: apache.ssl.enabled == True or apache.behind_ssl_reverse_proxy

- name: ansible tasks like variables, not group_vars
  set_fact:
    siteUrl: '{{ dataverse.glassfish.siteurl }}'

- name: if siteUrl not passed, use fqdn.
  set_fact:
    siteUrl: '{{ protocol }}\://{{ ansible_fqdn }}'
  when: siteUrl |length < 1

- name: are we in EC2?
  uri:
    url: http://169.254.169.254/latest/meta-data/
    timeout: 2
  register: aws_uri_check
  failed_when: False

- set_fact:
    is_aws_environment: "{{ aws_uri_check.status == 200 }}"

- name: if we're in EC2, get public hostname
  shell: 'curl http://169.254.169.254/latest/meta-data/public-hostname'
  register: ec2_output
  when: is_aws_environment

- name: if we're in EC2, set public hostname
  set_fact:
    public_hostname: "{{ ec2_output.stdout }}"
  when: is_aws_environment

- name: now correct siteUrl
  set_fact:
    siteUrl: '{{ protocol }}\://{{ public_hostname}}'
  when: is_aws_environment

- name: preserve public_hostname either way
  set_fact:
     public_hostname: '{{ ansible_fqdn }}'
  when: not is_aws_environment

# for asadmin command
- name: escape colons in siteurl
  set_fact: "siteUrl_escaped={{ siteUrl | regex_replace (':','\\:') }}"

# for errybody else
- name: debug
  debug:
    msg: 'siteUrl is {{ siteUrl }}'

- name: strip siteurl for servername directives
  set_fact:
    servername: "{{ siteUrl | regex_replace('[A-z]*://', '') }}"
