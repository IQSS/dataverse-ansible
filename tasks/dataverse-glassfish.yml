---
# dataverse/tasks/dataverse-glassfish.yml

- name: install glassfish
  debug:
    msg: '##### GLASSFISH #####'

- name: glassfish_dir must exist
  file: path={{ glassfish_dir }} state=directory
        owner=root group=root mode=0755

- name: download and unzip glassfish4
  get_url:
    url: '{{ dataverse.glassfish.zipurl }}'
    dest: /tmp/glassfish.zip

- name: bsdtar can unzip in smarter ways
  yum:
    name: bsdtar
    state: latest

- name: unzip to glassfish root without name/version tld
  shell: 'bsdtar --strip-components=1 -C {{ glassfish_dir }} -xvf /tmp/glassfish.zip'

- name: create glassfish service group
  group: name={{ dataverse.glassfish.group }} state=present

- name: create glassfish service account
  user: name={{ dataverse.glassfish.user }} group={{ dataverse.glassfish.group }}

- name: glassfish service account should own {{ dataverse.glassfish.domain }}
  file: path={{ glassfish_dir }}/glassfish/domains/{{ dataverse.glassfish.domain }} owner={{ dataverse.glassfish.user }}
        group={{ dataverse.glassfish.group }} state=directory recurse=yes

- name: remove old weld jar included with glassfish-4.1
  file:
    name: '{{ glassfish_dir }}/glassfish/modules/weld-osgi-bundle.jar'
    state: absent
  when: dataverse.glassfish.zipurl is match(".*glassfish-4.1.zip")

- name: get patched weld jar for glassfish-4.1
  get_url:
    url: 'https://search.maven.org/remotecontent?filepath=org/jboss/weld/weld-osgi-bundle/2.2.10.Final/weld-osgi-bundle-2.2.10.Final-glassfish4.jar'
    dest: '{{ glassfish_dir }}/glassfish/modules'
    owner: root
    group: root
    mode: 0644
  when: dataverse.glassfish.zipurl is match(".*glassfish-4.1.zip")

- name: remove old grizzly jar included with glassfish-4.1
  file:
    name: '{{ glassfish_dir }}/glassfish/modules/glassfish-grizzly-extra-all.jar'
    state: absent
  when: dataverse.glassfish.zipurl is match(".*glassfish-4.1.zip")

- name: get patched grizzly jar for glassfish-4.1
  get_url:
    url: http://guides.dataverse.org/en/latest/_static/installation/files/issues/2180/grizzly-patch/glassfish-grizzly-extra-all.jar
    dest: '{{ glassfish_dir }}/glassfish/modules'
    owner: root
    group: root
    mode: 0644
  when: dataverse.glassfish.zipurl is match(".*glassfish-4.1.zip")

# python installer fails to copy this for whatever reason
- name: place patched JSF jar
  copy:
    src: jakarta.faces_dv.jar
    dest: '{{ glassfish_dir }}/glassfish/modules/jakarta.faces.jar'
    owner: root
    group: root
    mode: 0644
  when: dataverse.glassfish.zipurl is match(".*payara-5.*")

# python installer fails to place jdbc driver for whatever reason
# and we want this configurable for testing updated drivers anyway
- name: set jdbcurl
  set_fact: jdbcurl='{{ db.postgres.jdbcurl }}'
  when: postgres['jdbcurl'] is defined

- name: install custom jdbc driver
  get_url:
    url: '{{ db.postgres.jdbcurl }}'
    dest: '{{ glassfish_dir }}/glassfish/modules/'
  when: jdbcurl is defined and
        jdbcurl | length > 0

- name: allow installer write access for release jdbc driver
  file:
    path: '{{ glassfish_dir }}/glassfish/lib'
    state: directory
    owner: '{{ dataverse.glassfish.user }}'
  when: jdbcurl is undefined

- name: install release jdbc driver
  shell: "/bin/cp /tmp/dvinstall/pgdriver/postgresql-*.jar {{ glassfish_dir }}/glassfish/lib/"
  when: jdbcurl is undefined

- name: increase resource limits for glassfish
  blockinfile:
    path: /etc/security/limits.conf
    block: |
      {{ item.user }} {{ item.type }} {{ item.descriptor }} {{ item.value }}
  with_items:
    - { user: "{{ dataverse.glassfish.user }}", type: soft, descriptor: nproc, value: 65000 }
    - { user: "{{ dataverse.glassfish.user }}", type: hard, descriptor: nproc, value: 65000 }
    - { user: "{{ dataverse.glassfish.user }}", type: soft, descriptor: nofile, value: 65000 }
    - { user: "{{ dataverse.glassfish.user }}", type: hard, descriptor: nofile, value: 65000 }

- name: install glassfish systemd conf file for RedHat / CentOS7
  template: src=glassfish.service.j2 dest=/usr/lib/systemd/system/glassfish.service
        owner=root group=root mode=0644
  when: ansible_os_family == "RedHat"

- name: agent must be on glassfish classpath
  copy:
    src: '{{ dataverse.jacoco.home }}/lib/jacocoagent.jar'
    dest: '{{ dataverse.glassfish.root }}/{{ dataverse.glassfish.dir }}/glassfish/lib/jacocoagent.jar'
  when: dataverse.jacoco.enabled == true

- name: configure jacoco agent
  lineinfile:
    path: '{{ glassfish_dir }}/glassfish/domains/{{ dataverse.glassfish.domain }}/config/domain.xml'
    line: '        <jvm-options>-Djavaagent:{{ dataverse.glassfish.root }}/{{ dataverse.glassfish.dir }}/glassfish/lib/jacocoagent.jar'
    insertafter: 'dataverse.timerServer'
  when: dataverse.jacoco.enabled == true

- name: fix payara-5.201 for java-1.8.0_252
  lineinfile:
    path: '{{ glassfish_dir }}/glassfish/domains/{{ dataverse.glassfish.domain }}/config/domain.xml'
    line: '                <jvm-options>[1.8.0u191|1.8.0u500]-Xbootclasspath/p:${com.sun.aas.installRoot}/lib/grizzly-npn-bootstrap-1.8.1.jar</jvm-options>'
    state: absent
  when: dataverse.glassfish.zipurl is match(".*payara-5.201.*")

- name: fix payara-5.201 for java-1.8.0_252
  lineinfile:
    path: '{{ glassfish_dir }}/glassfish/domains/{{ dataverse.glassfish.domain }}/config/domain.xml'
    line: '        <jvm-options>[1.8.0u191|1.8.0u251]-Xbootclasspath/p:${com.sun.aas.installRoot}/lib/grizzly-npn-bootstrap-1.8.1.jar</jvm-options>'
    insertafter: '.*grizzly-npn-bootstrap-1.8.jar.*'
  when: dataverse.glassfish.zipurl is match(".*payara-5.201.*")

- name: fix payara-5.201 for java-1.8.0_252
  lineinfile:
    path: '{{ glassfish_dir }}/glassfish/domains/{{ dataverse.glassfish.domain }}/config/domain.xml'
    line: '        <jvm-options>[1.8.0u252|1.8.0u500]-Xbootclasspath/p:${com.sun.aas.installRoot}/lib/grizzly-npn-api.jar</jvm-options>'
    insertafter: '.*grizzly-npn-bootstrap-1.8.1.jar.*'
  when: dataverse.glassfish.zipurl is match(".*payara-5.201.*")

- name: reload systemd on RedHat/CentOS7
  shell: systemctl daemon-reload
  when: ansible_os_family == "RedHat"

- name: enable glassfish on RedHat/CentOS7 - but don't start it with systemd during Ansible installation
  service: name=glassfish enabled=yes
  when: ansible_os_family == "RedHat"

- name: install glassfish upstart script for older Debian/Ubuntu
  template: src=glassfish.conf.j2 dest=/etc/init
        owner=root group=root mode=0644
  when:
   - ansible_os_family == "Debian"
   - ansible_distribution_major_version < 9
  notify: enable and restart glassfish

- name: start glassfish with asadmin so subsequent Ansible-initiated restarts succeed on RedHat/CentOS
  become: yes
  become_user: "{{ dataverse.glassfish.user }}"
  shell: "{{ glassfish_dir }}/bin/asadmin start-domain {{ dataverse.glassfish.domain }}"
  when: ansible_os_family == "RedHat"

- name: start glassfish on Debian/Ubuntu
  service: name=glassfish state=started
  when: ansible_os_family == "Debian"
