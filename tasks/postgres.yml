---
# dataverse/tasks/db.postgres.yml

- name: install postgres
  debug:
    msg: '##### POSTGRES #####'

- name: ansible postgres module wants python-psycopg2
  package:
    name: python-psycopg2
    state: latest

- name: install postgres repo RPM
  yum:
    name: 'https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm'
    state: present
  when: ansible_os_family == "RedHat"

- name: "rhel/centos8: disable postgresql proper in the OS"
  shell: 'dnf -qy module disable postgresql'
  when: ansible_os_family == "RedHat" and
        ansible_distribution_major_version == "8"

- name: postgres uses differing version syntax in a few commands/packages
  set_fact:
    dataverse_pg_version_short: "{{ db.postgres.version | regex_replace('\\.','') }}"

- name: install postgres server on RedHat / CentOS
  yum:
   name: 'postgresql{{ dataverse_pg_version_short }}-server'
   state: latest
  when: ansible_os_family == "RedHat" and
        db.use_rds == false

- name: install postgres server on Debian
  apt:
   name: 'postgresql-{{ dataverse_pg_version_short }}'
   state: latest
  when: ansible_os_family == "Debian" and
        db.use_rds == false


- name: install postgres client on RedHat / CentOS for RDS
  yum:
    name: 'postgresql{{ dataverse_pg_version_short }}'
    state: latest
  when: ansible_os_family == "RedHat" and
        db.use_rds == true

- name: install postgres client on Debian
  apt:
    name: 'postgresql-client-{{ dataverse_pg_version_short }}'
    state: latest
  when: ansible_os_family == "Debian" and
        db.use_rds == true


- name: set postgresql init command
  set_fact:
    postgres_init: 'creates=/var/lib/pgsql/{{ db.postgres.version }}/data/postgresql.conf /usr/pgsql-{{ db.postgres.version }}/bin/postgresql{{ dataverse_pg_version_short }}-setup initdb'
    when: ansible_os_family == "RedHat" and
          db.use_rds == false

- name: init command needs a dash on postgres 10+
  set_fact:
    postgres_init: 'creates=/var/lib/pgsql/{{ db.postgres.version }}/data/postgresql.conf /usr/pgsql-{{ db.postgres.version }}/bin/postgresql-{{ dataverse_pg_version_short }}-setup initdb'
  when: >
    dataverse_pg_version_short is search("1[0-9]") and
    ansible_os_family == "RedHat" and
    db.use_rds == false

- name: have we init-ed postgres yet?
  stat:
    path: '/var/lib/pgsql/{{ db.postgres.version }}/main/initdb.log'
  register: postgres_initdb
  when: db.use_rds == false

- name: init postgres on RHEL/CentOS
  shell: '{{ postgres_init }}'
  when: postgres_initdb.stat.exists == false and
        db.use_rds == false and
        ansible_os_family == "RedHat"
  notify: enable and restart postgres

- name: install pg_hba.conf on RHEL/CentOS
  copy:
    src: pg_hba.conf
    dest: '/var/lib/pgsql/{{ db.postgres.version }}/data'
    owner: postgres
    group: postgres
    mode: 0644
  when: ansible_os_family == "RedHat" and
        db.use_rds == false
  notify: enable and restart postgres

- name: install pg_hba.conf on Debian
  copy:
    src: pg_hba.conf
    dest: '/etc/postgresql/{{ db.postgres.version }}/main'
    owner: postgres
    group: postgres
    mode: 0644
  when: ansible_os_family == "Debian" and
        db.use_rds == false
  notify: enable and restart postgres


- name: log_lock_waits when told
  lineinfile:
    path: '/usr/lib/pgsql/{{ db.postgres.version }}/data/postgresql.conf'
    regexp: '^#log_lock_waits'
    line: 'log_lock_waits = on'
  when: db.postgres.log_lock_waits == true and
        db.use_rds == false and
        ansible_os_family == "RedHat"
  notify: enable and restart postgres

- name: log_lock_waits when told
  lineinfile:
    path: '/etc/postgresql/{{ db.postgres.version }}/main/postgresql.conf'
    regexp: '^#log_lock_waits'
    line: 'log_lock_waits = on'
  when: db.postgres.log_lock_waits == true and
        db.use_rds == false and
        ansible_os_family == "Debian"
  notify: enable and restart postgres

- name: dataverse python installer wants to be a postgres admin
  postgresql_user:
    name: postgres
    password: '{{ db.postgres.adminpass }}'

- name: create glassfish postgres database
  postgresql_db:
    name: '{{ db.postgres.name }}'
  when: db.use_rds == false

- name: create glassfish postgres user, set permissions
  postgresql_user:
    db: '{{ db.postgres.name }}'
    name: '{{ db.postgres.user }}'
    password: '{{ db.postgres.pass }}'
    role_attr_flags: 'NOSUPERUSER,CREATEDB,CREATEROLE,INHERIT,LOGIN'
  when: db.use_rds == false
