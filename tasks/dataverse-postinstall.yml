---

# dataverse/tasks/dataverse-postinstall.yml

- name: postinstall glassfish configuration
  debug:
    msg: '##### POST-INSTALL GLASSFISH CONFIGURATION #####'

# Glassfish is not running here.
#- name: stop glassfish manually (systemd gums up the works)
#  become: yes
#  become_user: "{{ dataverse.glassfish.user }}"
#  shell: '{{ glassfish_dir }}/bin/asadmin stop-domain {{ dataverse.glassfish.domain }}'

- name: set siteurl
  lineinfile:
    path:   '{{ glassfish_dir }}/glassfish/domains/{{ dataverse.glassfish.domain }}/config/domain.xml'
    regexp: 'dataverse.siteUrl'
    line:   '        <jvm-options>-Ddataverse.siteUrl={{ siteUrl_escaped }}</jvm-options>'
    insertafter: '<jvm-options>-server</jvm-options>'
  notify: enable and restart glassfish

- name: flush hadlers to restart glassfish if necessary
  meta: flush_handlers

- name: wait for glassfish to become ready
  wait_for:
    port: 8009
    state: present
    timeout: "{{ dataverse.glassfish.timeout }}"

## this will definitely fail if run for the second time, so we use lineinfile above
#- name: set siteurl
#  become: yes
#  become_user: "{{ dataverse.glassfish.user }}"
#  shell: '{{ glassfish_dir }}/bin/asadmin create-jvm-options "-Ddataverse.siteUrl={{ siteUrl_escaped }}"'

- name: set logging format
  become: yes
  become_user: "{{ dataverse.glassfish.user }}"
  shell: "{{ glassfish_dir }}/bin/asadmin set-log-file-format {{ dataverse.glassfish.logformat }}"

# python installer does this now
#- name: setup-all.sh kitchen sink configuration.
#  shell: "cd /tmp/dvinstall && ./setup-all.sh -p={{ dataverse.adminpass }} > /tmp/setup-all.out 2>&1"

- name: stage custom metadata blocks
  file:
    path: /tmp/dataverse/custom_metadata_blocks
    state: directory
  when: dataverse.custom_metadata_blocks.enabled == True

- name: grab custom metadata blocks
  get_url:
    url: '{{ item }}'
    dest: /tmp/dataverse/custom_metadata_blocks
  loop: '{{ dataverse.custom_metadata_blocks.urls }}'
  when: dataverse.custom_metadata_blocks.enabled == True

- name: read custom metadata block list
  find:
    path: /tmp/dataverse/custom_metadata_blocks
  register: custom_metadata_block_list

- name: load custom metadata blocks
  uri:
    url: http://localhost:8080/api/admin/datasetfield/load
    method: POST
    headers:
      Content-type: 'text/tab-separated-values'
    body: "{{ lookup('file', item.path) }}"
  loop: '{{ custom_metadata_block_list.files }}'
  when: dataverse.custom_metadata_blocks.enabled == True

- name: update custom metadata blocks
  script: '/tmp/dvinstall/updateSchemaMDB.sh -t {{ dataverse.solr.root }}/server/solr/collection1/conf'
  become: yes
  become_user: '{{ dataverse.solr.user }}'
  when: dataverse.custom_metadata_blocks.enabled == True

# python installer does this now
#- name: populate reference data
#  shell: "psql -U {{ db.postgres.user }} -h {{ db.postgres.host }} -d {{ db.postgres.name }} -f /tmp/dvinstall/reference_data.sql"
#  environment:
#    PGPASSWORD: "{{ db.postgres.pass }}"

# integration tests require these
- name: support sequential identifiers fetch current SQL script
  get_url:
    url: http://guides.dataverse.org/en/latest/_downloads/createsequence.sql
    dest: /tmp/createsequence.sql
    mode: '0644'
  register: createsequence_sql_download

- name: "support sequential identifiers use db.user"
  lineinfile:
    path: /tmp/createsequence.sql
    regexp: '^ALTER TABLE datasetidentifier_seq OWNER TO "dvnapp"'
    line: 'ALTER TABLE datasetidentifier_seq OWNER TO "{{ db.postgres.user }}";'
  register: createsequence_sql_user

- name: support sequential identifiers
  shell: "psql -U {{ db.postgres.user }} -h {{ db.postgres.host }} -d {{ db.postgres.name }} -f /tmp/createsequence.sql"
  environment:
    PGPASSWORD: "{{ db.postgres.pass }}"
  when: createsequence_sql_download.changed or createsequence_sql_user.changed

- name: suppress grizzly ajp warnings
  become: yes
  become_user: "{{ dataverse.glassfish.user }}"
  shell: "{{ glassfish_dir }}/bin/asadmin set-log-levels org.glassfish.grizzly.http.server.util.RequestUtils=SEVERE"

- name: override some default settings
  become: yes
  become_user: "{{ dataverse.glassfish.user }}"
  shell: 'curl -X PUT -d "{{item.val}}" "{{ dataverse.api.location }}/admin/settings/{{item.prop}}"'
  with_items:
    - { prop: ":GoogleAnalyticsCode", val: "{{ dataverse.google_analytics_key }}", desc: "key for Google Analytics"}
    - { prop: ":FooterCopyright" , val: "{{ dataverse.copyright }}", desc: "addition to the default copyright statement"}
    - { prop: ":SystemEmail", val: "{{ dataverse.service_email }}", desc: "instance email address"}
    - { prop: ":Protocol", val: "{{ dataverse.doi.protocol }}", desc: "global identifier protocol"}
    - { prop: ":DoiProvider", val: "{{ dataverse.doi.provider }}", desc: "DOI service provider (EZID or DataCite)"}
    - { prop: ":Authority", val: "{{ dataverse.doi.authority }}", desc: "DOI prefix"}
    - { prop: ":Shoulder,", val: "/", desc: "DOI shoulder. leave as slash (/)"}
    - { prop: ":ShibEnabled", val: "{{ shibboleth.enabled }}", desc: "enable/disable shibboleth" }
    - { prop: ":AllowSignUp", val: "{{ dataverse.allow_signups }}", desc: "don't allow self-signup"}
    - { prop: ":BlockedApiEndpoints", val: "admin,test", desc: "APIs that are controlled"}
    - { prop: ":BlockedApiPolicy", val: "localhost-only", desc: "control API access"}

- name: enable AllowApiTokenLookupViaApi for those so inclined
  shell: 'curl -X PUT -d true http://localhost:8080/api/admin/settings/:AllowApiTokenLookupViaApi'
  when: dataverse.api.allow_lookup == true
